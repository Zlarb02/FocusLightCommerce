import { db, pool, testDatabaseConnection } from "./storage/db.js";
import { migrate } from "drizzle-orm/node-postgres/migrator";
import { sql } from "drizzle-orm";
import path from "path";
import { fileURLToPath } from "url";
import fs from "fs";
import bcrypt from "bcrypt";

// R√©cup√©rer le r√©pertoire courant
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Chemin vers le dossier de migrations
const migrationsFolder = path.join(__dirname, "../migrations");

async function createTablesDirectly() {
  console.log("Cr√©ation directe des tables dans la base de donn√©es...");

  try {
    // Cr√©ation des tables une par une dans le bon ordre
    console.log("Cr√©ation de la table des produits...");
    await db.execute(sql`
      CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        description TEXT NOT NULL,
        price REAL NOT NULL
      )
    `);

    console.log("Cr√©ation de la table des variations de produits...");
    await db.execute(sql`
      CREATE TABLE IF NOT EXISTS product_variations (
        id SERIAL PRIMARY KEY,
        product_id INTEGER NOT NULL,
        variation_type TEXT NOT NULL,
        variation_value TEXT NOT NULL,
        price REAL,
        stock INTEGER NOT NULL DEFAULT 0,
        image_url TEXT NOT NULL
      )
    `);

    console.log("Cr√©ation de la table des clients...");
    await db.execute(sql`
      CREATE TABLE IF NOT EXISTS customers (
        id SERIAL PRIMARY KEY,
        first_name TEXT NOT NULL,
        last_name TEXT NOT NULL,
        email TEXT NOT NULL UNIQUE,
        phone TEXT NOT NULL,
        address TEXT,
        city TEXT,
        postal_code TEXT,
        country TEXT
      )
    `);

    console.log("Cr√©ation de la table des commandes...");
    await db.execute(sql`
      CREATE TABLE IF NOT EXISTS orders (
        id SERIAL PRIMARY KEY,
        customer_id INTEGER NOT NULL,
        total_amount REAL NOT NULL,
        status TEXT NOT NULL DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT NOW()
      )
    `);

    console.log("Cr√©ation de la table des √©l√©ments de commande...");
    await db.execute(sql`
      CREATE TABLE IF NOT EXISTS order_items (
        id SERIAL PRIMARY KEY,
        order_id INTEGER NOT NULL,
        product_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        price REAL NOT NULL
      )
    `);

    console.log("Cr√©ation de la table des utilisateurs...");
    await db.execute(sql`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username TEXT NOT NULL UNIQUE,
        password TEXT NOT NULL,
        is_admin BOOLEAN DEFAULT FALSE
      )
    `);

    console.log("Cr√©ation de la table des m√©dias...");
    await db.execute(sql`
      CREATE TABLE IF NOT EXISTS media (
        id SERIAL PRIMARY KEY,
        filename TEXT NOT NULL,
        path TEXT NOT NULL,
        type TEXT NOT NULL,
        size INTEGER NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT NOW()
      )
    `);

    console.log("Cr√©ation de la table des versions du site...");
    await db.execute(sql`
      CREATE TABLE IF NOT EXISTS site_versions (
        id SERIAL PRIMARY KEY,
        shop_mode TEXT NOT NULL DEFAULT 'focus',
        theme_decoration TEXT NOT NULL DEFAULT 'none',
        is_active BOOLEAN NOT NULL DEFAULT FALSE,
        created_at TIMESTAMP NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMP NOT NULL DEFAULT NOW()
      )
    `);

    console.log("Toutes les tables ont √©t√© cr√©√©es avec succ√®s!");
    return true;
  } catch (error) {
    console.error("Erreur lors de la cr√©ation directe des tables:", error);
    throw error;
  }
}

async function runMigrations() {
  // Tester la connexion √† la base de donn√©es
  const isConnected = await testDatabaseConnection();
  if (!isConnected) {
    console.error(
      "Impossible de se connecter √† la base de donn√©es pour les migrations"
    );
    process.exit(1);
  }

  try {
    // V√©rifier si le dossier de migrations existe
    const hasMigrationsFolder =
      fs.existsSync(migrationsFolder) &&
      fs.readdirSync(migrationsFolder).length > 0;

    if (hasMigrationsFolder) {
      console.log(`Migration √† partir du dossier: ${migrationsFolder}`);

      // Ex√©cuter les migrations via drizzle
      await migrate(db, { migrationsFolder });
      console.log("Migrations termin√©es avec succ√®s");
    } else {
      console.log("Aucun dossier de migrations trouv√© ou dossier vide");
      console.log("Cr√©ation directe des tables...");

      // Cr√©er les tables directement depuis le sch√©ma
      await createTablesDirectly();
    }

    // Initialiser les donn√©es par d√©faut si n√©cessaire
    await initializeDefaultData();

    console.log("‚úÖ Migration et initialisation termin√©es avec succ√®s");
  } catch (error) {
    console.error("‚ùå Erreur lors de la migration:", error);
    process.exit(1);
  } finally {
    // Fermer la connexion √† la base de donn√©es
    await pool.end();
  }
}

/**
 * Initialise les donn√©es par d√©faut n√©cessaires
 * - Cr√©e un utilisateur admin si ADMIN_PASSWORD est d√©fini
 * - Cr√©e les produits initiaux (les lampes FocusLight)
 */
async function initializeDefaultData() {
  console.log("Initialisation des donn√©es par d√©faut...");

  try {
    // Cr√©er l'utilisateur admin
    const adminPassword = process.env.ADMIN_PASSWORD;

    if (adminPassword) {
      const existingUsers = await db.execute(
        sql`SELECT * FROM users WHERE username = 'admin'`
      );

      if (existingUsers.rowCount === 0) {
        // Hasher le mot de passe
        const hashedPassword = await bcrypt.hash(adminPassword, 10);

        await db.execute(
          sql`INSERT INTO users (username, password, is_admin) 
              VALUES ('admin', ${hashedPassword}, TRUE)`
        );

        console.log("‚úÖ Utilisateur admin cr√©√© avec succ√®s");
      } else {
        console.log("üë§ L'utilisateur admin existe d√©j√†");
      }
    } else {
      console.log(
        "‚ö†Ô∏è ADMIN_PASSWORD non d√©fini, pas de cr√©ation d'utilisateur admin"
      );
    }

    // V√©rifier si des produits existent d√©j√†
    const existingProducts = await db.execute(sql`SELECT * FROM products`);

    if (existingProducts.rowCount === 0) {
      console.log("üõçÔ∏è Initialisation des produits...");

      // Cr√©er le produit de base
      const lampProductResult = await db.execute(
        sql`INSERT INTO products (name, description, price)
            VALUES (
              'FOCUS.01', 
              'Lampe d''appoint imagin√©e et fabriqu√©e par Anatole Collet. R√©aliser en PLA √©coresponsable et en ch√™ne √©cog√©r√©, livr√© avec une ampoule LED de 60W E14 et un c√¢ble avec interrupteur de 1m50.',
              70.0
            )
            RETURNING id`
      );

      if (lampProductResult.rowCount && lampProductResult.rowCount > 0) {
        const productId = lampProductResult.rows[0].id;

        // Ajouter les variations de couleur
        await db.execute(
          sql`INSERT INTO product_variations 
              (product_id, variation_type, variation_value, stock, image_url)
              VALUES 
              (${productId}, 'color', 'Blanc', 10, '/uploads/blanche.png'),
              (${productId}, 'color', 'Bleu', 10, '/uploads/bleue.png'),
              (${productId}, 'color', 'Rouge', 10, '/uploads/rouge.png'),
              (${productId}, 'color', 'Orange', 10, '/uploads/orange.png')`
        );

        console.log("‚úÖ Produits initialis√©s avec succ√®s");
      }
    } else {
      console.log("üõçÔ∏è Des produits existent d√©j√† dans la base de donn√©es");
    }

    // Initialiser la version du site par d√©faut si n√©cessaire
    const existingVersions = await db.execute(sql`SELECT * FROM site_versions`);

    if (existingVersions.rowCount === 0) {
      console.log("üîÑ Initialisation de la version du site par d√©faut...");

      await db.execute(
        sql`INSERT INTO site_versions (shop_mode, theme_decoration, is_active)
            VALUES ('focus', 'none', TRUE)`
      );

      console.log("‚úÖ Version du site initialis√©e avec succ√®s");
    } else {
      console.log("üîÑ Des versions de site existent d√©j√†");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de l'initialisation des donn√©es:", error);
    throw error;
  }
}

// Ex√©cuter les migrations
runMigrations();
